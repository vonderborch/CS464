
/* TopFunctionSubscriber.java

   A publication of data of type TopFunction

   This file is derived from code automatically generated by the rtiddsgen 
   command:

   rtiddsgen -language java -example <arch> .idl

   Example publication of type TopFunction automatically generated by 
   'rtiddsgen' To test them follow these steps:

   (1) Compile this file and the example subscription.

   (2) Start the subscription on the same domain used for with the command
       java TopFunctionSubscriber <domain_id> <sample_count>

   (3) Start the publication with the command
       java TopFunctionPublisher <domain_id> <sample_count>

   (4) [Optional] Specify the list of discovery initial peers and 
       multicast receive addresses via an environment variable or a file 
       (in the current working directory) called NDDS_DISCOVERY_PEERS. 
       
   You can run any number of publishers and subscribers programs, and can 
   add and remove them dynamically from the domain.
              
                                   
   Example:
        
       To run the example application on domain <domain_id>:
            
       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.                       
       
        On UNIX systems: 
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable
                                         
        On Windows systems:
             add %NDDSHOME%\lib\<arch> to the 'Path' environment variable
                        

       Run the Java applications:
       
        java -Djava.ext.dirs=$NDDSHOME/class TopFunctionPublisher <domain_id>

        java -Djava.ext.dirs=$NDDSHOME/class TopFunctionSubscriber <domain_id>  
       
       
modification history
------------ -------   
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.ArrayList;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class TopFunctionSubscriber {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------
    
    public static void main(String[] args) {
        // --- Get domain ID --- //
        int domainId = 0;
        if (args.length >= 1) {
            domainId = Integer.valueOf(args[0]).intValue();
        }
        
        // -- Get max loop count; 0 means infinite loop --- //
        int sampleCount = 0;
        if (args.length >= 2) {
            sampleCount = Integer.valueOf(args[1]).intValue();
        }
        
		float filteredCpuUsage = 0.02f;
		System.out.println("Filter for CPU Usage >=...");
		String input = System.console().readLine();
		if (!input.trim().equals(""))
			filteredCpuUsage = Float.parseFloat(input);
        
		float filteredMemUsage = 0.50f;
		System.out.println("Filter for MEM Usage >=...");
		input = System.console().readLine();
		if (!input.trim().equals(""))
			filteredMemUsage = Float.parseFloat(input);
        
        /* Uncomment this to turn on additional logging
        Logger.get_instance().set_verbosity_by_category(
            LogCategory.NDDS_CONFIG_LOG_CATEGORY_API,
            LogVerbosity.NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
        */
        
        // --- Run --- //
        subscriberMain(domainId, sampleCount, filteredCpuUsage, filteredMemUsage);
    }
    
    
    
    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------
    
    // --- Constructors: -----------------------------------------------------
    
    private TopFunctionSubscriber() {
        super();
    }
    
    
    // -----------------------------------------------------------------------
    
    private static void subscriberMain(int domainId, int sampleCount, float filteredCpuUsage, float filteredMemUsage) {

        DomainParticipant participant = null;
        Subscriber subscriber = null;
        Topic topic = null;
        DataReaderListener listener = null;
        TopFunctionDataReader reader = null;

        try {

            // --- Create participant --- //
    
            /* To customize participant QoS, use
               the configuration file
               USER_QOS_PROFILES.xml */
			   
            DomainParticipantQos participant_qos = new DomainParticipantQos();
            DomainParticipantFactory.TheParticipantFactory
                    .get_default_participant_qos(participant_qos);
					
            participant_qos.resource_limits.type_code_max_serialized_length = 10000;
            participant_qos.resource_limits.contentfilter_property_max_length = 32000;
            participant_qos.resource_limits.topic_data_max_length = 8 * 512;

					
            participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                    domainId, participant_qos,
                    null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }
			

            // --- Create subscriber --- //
    
            /* To customize subscriber QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     
                
            // --- Create topic --- //
        
            /* Register type before creating topic */
            String typeName = TopFunctionTypeSupport.get_type_name(); 
            TopFunctionTypeSupport.register_type(participant, typeName);
    
            /* To customize topic QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
            topic = participant.create_topic(
                "CS464/564 Project 2 cwebber",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (topic == null) {
                System.err.println("create_topic error\n");
                return;
            }
			
			
			TopFilter customfilter = new TopFilter();
			participant.register_contentfilter("TopFilter", customfilter);
			
            System.out.println("registered");
			
			ArrayList<String> params = new ArrayList<>();
			params.add(Float.toString(filteredCpuUsage));
			params.add(Float.toString(filteredMemUsage));
			params.add("valid");

			StringSeq parameters = new StringSeq(params);
            ContentFilteredTopic filteredtopic = participant
                    .create_contentfilteredtopic_with_filter(
                            "CS464/564 Project 2 cwebber", topic, "%0 %1 %2 cpuUsage memUsage",
                            parameters, "TopFilter");
            if (filteredtopic == null) {
                System.err.println("create_contentfilteredtopic_with_filter error, using alternate.\n");
            }
            System.out.println("compiled");
		
            // --- Create reader --- //

            listener = new TopFunctionListener(filteredCpuUsage, filteredMemUsage);
			
    
            /* To customize data reader QoS, use
               the configuration file USER_QOS_PROFILES.xml */
    
			DataReaderQos datareader_qos = new DataReaderQos();
            subscriber.get_default_datareader_qos(datareader_qos);
			datareader_qos.ownership.kind = OwnershipQosPolicyKind.EXCLUSIVE_OWNERSHIP_QOS;
			if (filteredtopic == null)
			{
				reader = (TopFunctionDataReader)
						subscriber.create_datareader(
								topic, datareader_qos, listener,
								StatusKind.STATUS_MASK_ALL);
			}
			else
			{
				reader = (TopFunctionDataReader)
						subscriber.create_datareader(
								filteredtopic, datareader_qos, listener,
								StatusKind.STATUS_MASK_ALL);
			}
            if (reader == null) {
                System.err.println("create_datareader error\n");
                return;
            }
        
            // --- Wait for data --- //

            final long receivePeriodSec = 4;

            for (int count = 0;
                 (sampleCount == 0) || (count < sampleCount);
                 ++count) {
                System.out.println("TopFunction subscriber sleeping for "
                                   + receivePeriodSec + " sec...");
                try {
                    Thread.sleep(receivePeriodSec * 1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                    delete_participant(participant);
            }
            /* RTI Connext provides the finalize_instance()
               method for users who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
    
    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------
    
    // =======================================================================
    
    private static class TopFunctionListener extends DataReaderAdapter {
		public TopFunctionListener(float cpu, float mem)
		{
			_cpu = cpu;
			_mem = mem;
		}
        public float _cpu = 0f;
		public float _mem = 0f;
		
        TopFunctionSeq _dataSeq = new TopFunctionSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            TopFunctionDataReader TopFunctionReader =
                (TopFunctionDataReader)reader;
            
            try {
                TopFunctionReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);

                    if (info.valid_data) {
						TopFunction inp = (TopFunction)_dataSeq.get(i);
						
						if (inp.cpuUsage >= _cpu && inp.memUsage >= _mem)
						{
							System.out.println(inp.toString("Received",0));
						}
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                TopFunctionReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
}


        